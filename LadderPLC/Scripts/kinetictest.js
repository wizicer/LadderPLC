// Generated by CoffeeScript 1.7.1
var Coil, DrawToolbox, Element, InitialData, Ladder, Relay, Rung,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.onload = function() {
  var drawLayer, ld, stage, zoom;
  stage = new Kinetic.Stage({
    container: "holder",
    width: 578,
    height: 400
  });
  DrawToolbox(stage);
  drawLayer = new Kinetic.Layer({
    x: 60
  });
  zoom = function(e) {
    var zoomAmount;
    if (e.altKey) {
      zoomAmount = drawLayer.getScale().x + e.wheelDeltaY * 0.001;
      drawLayer.scale({
        x: zoomAmount,
        y: zoomAmount
      });
      return drawLayer.draw();
    }
  };
  document.addEventListener("mousewheel", zoom, false);
  stage.add(drawLayer);
  ld = InitialData(drawLayer);
  return console.log(JSON.stringify(ld));
};

InitialData = function(drawLayer) {
  var ladder, rg;
  ladder = new Ladder(drawLayer);
  rg = ladder.AddRung();
  rg.AddElement("Relay", "AI0");
  rg.AddElement("Relay", "AI1");
  rg.AddElement("Relay", "AI2");
  rg.AddElement("Coil", "AO1");
  rg.AddElement("Relay", "AI2");
  rg = ladder.AddRung();
  rg.AddElement("Relay", "AI01");
  rg.AddElement("Relay", "AI11");
  rg.AddElement("Coil", "AO1");
  rg.AddElement("Relay", "AI21");
  rg = ladder.AddRung();
  rg.AddElement("Relay", "AI02");
  rg.AddElement("Coil", "AO2");
  rg.AddElement("Relay", "AI12");
  rg.AddElement("Relay", "AI22");
  drawLayer.draw();
  return ladder;
};

Ladder = (function() {
  function Ladder(layer) {
    this.rungs = [];
    this.parentlayer = layer;
    this.layer = new Kinetic.Group();
    this.parentlayer.add(this.layer);
    this.posindicator = new Kinetic.Line({
      points: [0, 0, Rung.getheadwidth() + 5, 0],
      stroke: 'brown',
      strokeWidth: 2
    });
    this.layer.add(this.posindicator);
    this.posindicator.hide();
  }

  Ladder.prototype.AddRung = function(name) {
    var num, r, rg, sum, _i, _len, _ref;
    num = this.rungs.length;
    rg = new Rung(this, num);
    this.posindicator.moveToTop();
    sum = 0;
    _ref = this.rungs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      r = _ref[_i];
      sum += r.getHeight();
    }
    rg.setOffset(sum);
    this.rungs = this.rungs.concat(rg);
    return rg;
  };

  Ladder.prototype.MoveIndicator = function(offset) {
    var i, leftpos, rightpos;
    this.posindicator.show();
    rightpos = 0;
    i = 0;
    while (i < this.rungs.length) {
      leftpos = rightpos;
      rightpos += this.rungs[i].getHeight();
      if ((rightpos > offset && offset >= leftpos)) {
        if (offset - leftpos > rightpos - offset) {
          i = i + 1;
        }
        rightpos = offset - leftpos > rightpos - offset ? rightpos : leftpos;
        break;
      }
      i++;
    }
    this.posindicator.setAttr('y', rightpos);
    return i;
  };

  Ladder.prototype.HideIndicator = function() {
    return this.posindicator.hide();
  };

  Ladder.prototype.ReorderRung = function(from, to) {
    var i, pos, rg, _results;
    this.rungs.splice(to, 0, this.rungs.splice(from, 1)[0]);
    i = 0;
    pos = 0;
    _results = [];
    while (i < this.rungs.length) {
      rg = this.rungs[i];
      rg.setOffset(pos);
      rg.setNumber(i);
      pos += rg.getHeight();
      _results.push(i++);
    }
    return _results;
  };

  return Ladder;

})();

Rung = (function() {
  var headwidth, height;

  height = 100;

  headwidth = 20;

  Rung.getheadwidth = function() {
    return headwidth;
  };

  function Rung(parent, number) {
    var headrect;
    this.elements = [];
    this.ladder = parent;
    this.parentlayer = parent.layer;
    this.layer = new Kinetic.Group({
      dragBoundFunc: function(pos) {
        return {
          x: this.getAbsolutePosition().x,
          y: pos.y
        };
      }
    });
    this.parentlayer.add(this.layer);
    this.layer.target = this;
    this.head = new Kinetic.Group();
    headrect = new Kinetic.Rect({
      x: 0,
      y: 0,
      width: headwidth,
      height: height,
      fill: "#fff"
    });
    this.head.add(headrect);
    this.layer.add(this.head);
    this.number = number;
    this.numbertext = new Kinetic.Text({
      x: 0,
      y: 0,
      width: headwidth,
      height: height,
      text: this.number,
      align: 'center',
      fontSize: 18,
      fill: 'blue'
    });
    this.head.add(this.numbertext);
    this.track = new Kinetic.Line({
      points: [headwidth + 5, 0, headwidth + 5, height],
      stroke: 'black',
      strokeWidth: 2
    });
    this.layer.add(this.track);
    this.head.parentlayer = this.layer;
    this.head.on("mouseover", function() {
      document.body.style.cursor = "move";
      return this.parentlayer.draggable(true);
    });
    this.head.on("mouseout", function() {
      document.body.style.cursor = "default";
      return this.parentlayer.draggable(false);
    });
    this.layer.on("dragstart", function(evt) {
      this.opacity(0.5);
      return this.draw();
    });
    this.layer.on("dragend", function(evt) {
      var num;
      this.setAttr('y', this.target.offset);
      this.opacity(1);
      num = this.target.ladder.MoveIndicator(evt.layerY);
      this.target.ladder.ReorderRung(this.target.number, num);
      this.target.ladder.HideIndicator();
      return this.parent.parent.draw();
    });
    this.layer.on("dragmove", function(evt) {
      return this.target.ladder.MoveIndicator(evt.layerY);
    });
  }

  Rung.prototype.getHeight = function() {
    return height;
  };

  Rung.prototype.setOffset = function(offset) {
    this.layer.setAttr('y', offset);
    return this.offset = offset;
  };

  Rung.prototype.AddElement = function(type, name) {
    var ele, lastelement, left, _ref;
    ele = (function() {
      switch (type) {
        case "Relay":
          return new Relay(this.layer, name);
        case "Coil":
          return new Coil(this.layer, name);
        default:
          return void 0;
      }
    }).call(this);
    _ref = this.elements, lastelement = _ref[_ref.length - 1];
    left = lastelement === void 0 ? headwidth + 5 : lastelement.getWidth();
    ele.moveto(left, 25, height / 2 - ele.getHeight() / 2);
    ele.render();
    this.elements = this.elements.concat(ele);
    return ele;
  };

  Rung.prototype.setNumber = function(number) {
    this.numbertext.setAttr('text', number);
    return this.number = number;
  };

  return Rung;

})();

Element = (function() {
  function Element(layer) {
    this.parentlayer = layer;
    this.layer = new Kinetic.Group();
    this.parentlayer.add(this.layer);
  }

  Element.prototype.getWidth = function() {
    return 0;
  };

  Element.prototype.getHeight = function() {
    return 0;
  };

  Element.prototype.render = function() {};

  Element.prototype.moveto = function(xbase, x, y) {
    this.left = xbase + x;
    this.layer.setAttr('x', xbase + x);
    this.layer.setAttr('y', y);
    return this.fronttrack.setAttr('points', [-x, this.getHeight() / 2, 0, this.getHeight() / 2]);
  };

  return Element;

})();

Relay = (function(_super) {
  var color, height, interval, stroke;

  __extends(Relay, _super);

  height = 25;

  interval = 20;

  color = "black";

  stroke = 2;

  function Relay(layer, name) {
    Relay.__super__.constructor.call(this, layer);
    if (name === void 0) {
      name = "";
    }
    this.lefttrack = new Kinetic.Line({
      points: [0, 0, 0, height],
      stroke: color,
      strokeWidth: stroke
    });
    this.righttrack = new Kinetic.Line({
      points: [interval, 0, interval, height],
      stroke: color,
      strokeWidth: stroke
    });
    this.fronttrack = new Kinetic.Line({
      points: [0, 0, 0, 0],
      stroke: color,
      strokeWidth: stroke
    });
    this.caption = new Kinetic.Text({
      x: -interval / 2,
      y: -20,
      width: 40,
      align: 'center',
      text: name,
      fill: 'red',
      fontSize: 12
    });
    this.layer.add(this.lefttrack);
    this.layer.add(this.righttrack);
    this.layer.add(this.fronttrack);
    this.layer.add(this.caption);
  }

  Relay.prototype.getWidth = function() {
    return this.left + interval;
  };

  Relay.prototype.render = function() {};

  Relay.prototype.getHeight = function() {
    return height;
  };

  return Relay;

})(Element);

Coil = (function(_super) {
  var color, rad, stroke;

  __extends(Coil, _super);

  rad = 12;

  color = "black";

  stroke = 2;

  function Coil(layer, name) {
    Coil.__super__.constructor.call(this, layer);
    if (name === void 0) {
      name = "";
    }
    this.coil = new Kinetic.Circle({
      x: rad,
      y: rad,
      radius: rad,
      stroke: color,
      strokeWidth: stroke
    });
    this.fronttrack = new Kinetic.Line({
      points: [0, 0, 0, 0],
      stroke: color,
      strokeWidth: stroke
    });
    this.caption = new Kinetic.Text({
      x: -rad,
      y: -20,
      width: 40,
      align: 'center',
      text: name,
      fill: 'red',
      fontSize: 12
    });
    this.layer.add(this.coil);
    this.layer.add(this.fronttrack);
    this.layer.add(this.caption);
  }

  Coil.prototype.getWidth = function() {
    return this.left + 2 * rad;
  };

  Coil.prototype.render = function() {};

  Coil.prototype.getHeight = function() {
    return 2 * rad;
  };

  return Coil;

})(Element);

DrawToolbox = function(stage) {
  var colors, group, n, shapesLayer;
  shapesLayer = new Kinetic.Layer();
  group = new Kinetic.Group();
  colors = ["red", "orange", "yellow", "green", "blue", "purple"];
  n = 0;
  while (n < 6) {
    (function() {
      var box, i;
      i = n;
      box = new Kinetic.Rect({
        x: 10,
        y: i * 50 + 10,
        width: 40,
        height: 40,
        name: colors[i],
        fill: colors[i],
        stroke: "white",
        strokeWidth: 3,
        draggable: true
      });
      box.ox = box.x();
      box.oy = box.y();
      group.add(box);
    })();
    n++;
  }
  group.on("mouseover", function() {
    return document.body.style.cursor = "pointer";
  });
  group.on("mouseout", function() {
    return document.body.style.cursor = "default";
  });
  group.on("dragstart", function(evt) {});
  group.on("dragend", function(evt) {
    var node;
    node = evt.targetNode;
    node.setX(node.ox);
    node.setY(node.oy);
    return shapesLayer.draw();
  });
  shapesLayer.add(group);
  stage.add(shapesLayer);
  return group;
};
